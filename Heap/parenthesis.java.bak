class parenthesis{
	
	static final int MAX = 10;
	int top;
	String[] arr = new String[MAX];
	
	parenthesis(){
		top = -1;
	}
	
	boolean isEmpty(){
		if(top < 0 ){
			//System.out.println("Stack is Empty");
			return true;
		}
		
		return false;
	}
	
	boolean push(char x){
		if(top >= MAX-1){
			System.out.println("Stack is overflow");
			return false;
		}
		
		arr[++top] = x;
		return true;
	}
	
	String pop(){
		if(isEmpty()){
			System.out.println("Stack is underflow");
			return "";
		}
		
		return arr[top--];
	}
	
	boolean cheak(String expression){
		for(int i = 0; i< expression.length(); i++){
			char ch = expression.charAt(i);
			
			if(ch ==  '(' || ch == '{' || ch == '['){
				push(ch);
			} else if( ch == ')' || ch == '{' || ch == ']'){
				if(isEmpty()){
					return false;
				}
				
				char toElement = pop();
				if((ch == ')' && toElement != '(') ||
				   (ch == '}' && toElement != '{')||
				   (ch == ']' && toElement != '[')) {
					  return false;
				   }
			}
		}
		return isEmpty();
	}
	
	public static void main(String[] args){
		parenthesis stack = new parenthesis();
		String expression = "((()))";
		boolean result = stack.cheak(expression);
		
		if(result){
			System.out.println("parenthesis are balanced");
		}
		else {
			System.out.println("parenthesis are not balanced");
		}
	}
}